#!/usr/bin/env perl -w

use strict;
use Storable;
use FindBin;

use lib "$FindBin::Bin/tools";
use HPCPorts;

sub install {
	my ( $pdb, $pname, $root, $system, $env, $prefix, $overrides ) = @_;
	my $dep;
	foreach $dep ( @{$pdb->{ $pname }->{ "deps" }} ) {
		install ( $pdb, $dep, $root, $env, $overrides );
	}
	purge_stale ( $pdb, $pname, $root, $system, $env, $prefix, $overrides );
	my $fullversion = HPCPorts::package_fullversion ( $pdb, $pname, $env, $overrides );
	system ( "export PKG_FULLVERSION=${fullversion}; cd ${root}/packages/${pname}; make install" );
	return;
}

sub purge_stale {
	my ( $pdb, $pname, $root, $system, $env, $prefix, $overrides ) = @_;

	my $pkgdir = "${root}/packages/${pname}";

	my $status;
	if ( defined ( $overrides->{ $pname } ) ) {
		$status = "overridden";
	} else {
		$status = HPCPorts::package_state ( $pdb, "${pkgdir}", $system, $env, $prefix, $overrides );
	}

	if ( $status eq "stale" ) {
		my $fullversion = HPCPorts::package_fullversion ( $pdb, $pname, $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${pkgdir}; make purge" );
	}

	return;
}

my $hpcp_root = $FindBin::Bin;
my $pkgdir = $hpcp_root."/packages";
my $dbfile = $pkgdir."/pkg.db";

my $pre = "---> ";

# check system definition

my $system = $ENV{ "HPCP_HOST" };
if ( ! defined ( $system ) ) {
	die ( "\nYou must have the \"HPCP_HOST\" environment variable defined\n\n" );
}

# Parse commands

my $ARGC = @ARGV;

my $command = "";
my $subcommand = "";

if ( $ARGC > 0 ) {
	$command = $ARGV[0];
} else {
	print "\nUsage:  $0 <command> <option>\n\n";
	print "Where valid commands and options are:\n";
	print "   update\n";
	print "   status\n";
	print "   info <package name>\n";
	print "   purge <package name or ALL>\n";
	print "   install <package name>\n";
	print "   uninstall <package name or ALL>\n";
	print "   fetch <package name or ALL>\n";
	print "   clean <package name or ALL>\n";
	print "\n";
	exit(0);
}

if ( $ARGC > 1 ) {
	$subcommand = $ARGV[1];
}

# Update package DB

if ( $command eq "update" ) {
	my $pkgdb = HPCPorts::package_db ( $pkgdir );
	store ( $pkgdb, $dbfile );
	exit(0);
}

my $pkgdb = retrieve ( $dbfile );

my ( $env, $suffix, $prefix, $overrides ) = HPCPorts::config_vars ( "${hpcp_root}/system/${system}.make" );

#use Data::Dumper;
#print Dumper ( $pkgdb );

# Execute command

if ( $command eq "status" ) {

	my $out = $pre."---------------------------------------------------------\n";
	print $out;
	$out = $pre."System = \"".$system."\", Toolchain Version = \"".$env."\"\n";
	print $out;
	$out = $pre."---------------------------------------------------------\n";
	print $out;
	$out = $pre."\n";
	print $out;

	my $key;
	my $value;

	my $hpcpstat = HPCPorts::package_state ( $pkgdb, "${pkgdir}/hpcp", $system, $env, $prefix, $overrides );
	$out = sprintf ( "%s%16s | %20s |  %s\n", $pre, "hpcp", $env, $hpcpstat );
	print $out;

	foreach $key ( sort keys %{$pkgdb} ) {
		$value = $pkgdb->{ $key };

		my $status = "broken";
		if ( defined ( $overrides->{ $key } ) ) {
			$status = "overridden";
		} else {
			$status = HPCPorts::package_state ( $pkgdb, "${pkgdir}/${key}", $system, $env, $prefix, $overrides );
		}
		$out = sprintf ( "%s%16s | %20s |  %s\n", $pre, $key, $value->{ "version" }, $status );
		print $out;
	}
	
} elsif ( $command eq "purge" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 purge <package name or ALL>\n\n" );
	}

	if ( $subcommand eq "ALL" ) {

		my $key;
		my $value;
		my $fullversion;

		while ( ($key, $value) = each %{$pkgdb} ) {
			$fullversion = HPCPorts::package_fullversion ( $pkgdb, $key, $env, $overrides );
			system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${key}; make purge" );
		}

		$fullversion = HPCPorts::package_fullversion ( $pkgdb, "hpcp", $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/hpcp; make purge" );

	} else {
		my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $subcommand, $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${subcommand}; make purge" );
	}

} elsif ( $command eq "install" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 install <package name>\n\n" );
	}

	# recursively install all dependencies and the package

	if ( $subcommand ne "hpcp" ) {
		purge_stale ( $pkgdb, "hpcp", $hpcp_root, $system, $env, $prefix, $overrides );
		system ( "export PKG_FULLVERSION=${env}; cd ${hpcp_root}/packages/hpcp; make install" );
	}

	install ( $pkgdb, $subcommand, $hpcp_root, $system, $env, $prefix, $overrides );

} elsif ( $command eq "info" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 info <package name>\n\n" );
	}

	my $key;
	my $value;
	my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $subcommand, $env, $overrides );

	my $status = "broken";
	if ( defined ( $overrides->{ $subcommand } ) ) {
		$status = "overridden";
	} else {
		$status = HPCPorts::package_state ( $pkgdb, "${pkgdir}/${subcommand}", $system, $env, $prefix, $overrides );
	}

	print "$pre\n";
	my $out = sprintf ( "%s%14s  %s\n", $pre, "Name:", $subcommand );
	print $out;
	$out = sprintf ( "%s%14s  %s\n", $pre, "Version:", $fullversion );
	print $out;
	$out = sprintf ( "%s%14s  %s\n", $pre, "State:", $status );
	print $out;
	$out = sprintf ( "%s%14s\n", $pre, "Dependencies:" );
	print $out;

	my $dep;
	for $dep ( @{ $pkgdb->{ $subcommand }->{ "deps" } } ) {
		my $depversion = HPCPorts::package_fullversion ( $pkgdb, $dep, $env, $overrides );
		$out = sprintf ( "%s%20s | %s\n", $pre, $dep, $depversion );
		print $out;
	}

	print "$pre\n";

} elsif ( $command eq "uninstall" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 uninstall <package name or ALL>\n\n" );
	}

	if ( $subcommand eq "ALL" ) {

		my $key;
		my $value;
		my $fullversion;

		while ( ($key, $value) = each %{$pkgdb} ) {
			$fullversion = HPCPorts::package_fullversion ( $pkgdb, $key, $env, $overrides );
			system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${key}; make uninstall" );
		}

		$fullversion = HPCPorts::package_fullversion ( $pkgdb, "hpcp", $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/hpcp; make uninstall" );

	} else {
		my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $subcommand, $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${subcommand}; make uninstall" );
	}

} elsif ( $command eq "fetch" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 fetch <package name or ALL>\n\n" );
	}

	if ( $subcommand eq "ALL" ) {

		my $key;
		my $value;

		while ( ($key, $value) = each %{$pkgdb} ) {
			my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $key, $env, $overrides );
			system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${key}; make fetch" );
		}

	} else {
		my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $subcommand, $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${subcommand}; make fetch" );
	}

} elsif ( $command eq "clean" ) {

	if ( $subcommand eq "" ) {
		die ( "\nUsage:  $0 clean <package name or ALL>\n\n" );
	}

	if ( $subcommand eq "ALL" ) {

		my $key;
		my $value;
		my $fullversion;

		while ( ($key, $value) = each %{$pkgdb} ) {
			$fullversion = HPCPorts::package_fullversion ( $pkgdb, $key, $env, $overrides );
			system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${key}; make clean" );
		}

		$fullversion = HPCPorts::package_fullversion ( $pkgdb, "hpcp", $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/hpcp; make clean" );

	} else {
		my $fullversion = HPCPorts::package_fullversion ( $pkgdb, $subcommand, $env, $overrides );
		system ( "export PKG_FULLVERSION=${fullversion}; cd ${hpcp_root}/packages/${subcommand}; make clean" );
	}

} else {
	die ( "\nUnknown command \"$command\"\n\n" );
}

