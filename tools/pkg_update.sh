
hpcp="--->"

echo "${hpcp}  Updating package list"

echo "# This file auto-generated by \"make update\" " > packages/pkg_list.make

pkgs=""

for entry in `ls packages`; do
	if [ -d packages/${entry} ]; then
		pkgs="${pkgs} ${entry}"
	fi
done

echo "PKGS =${pkgs}" >> packages/pkg_list.make


echo "${hpcp}  Generating package build rules and dependencies"

echo "# This file auto-generated by \"make update\" " > packages/pkg_rules.make

for pkg in ${pkgs}; do

	echo "" >> packages/pkg_rules.make
	
	deps=`head -n 1 packages/${pkg}/deps`

	if [ ${pkg} = hpcp ]; then
		echo "${pkg} : ${deps}" >> packages/pkg_rules.make
	else
		echo "${pkg} : hpcp ${deps}" >> packages/pkg_rules.make
	fi

	echo "" >> packages/pkg_rules.make

	echo "${pkg} : install-common" >> packages/pkg_rules.make
	echo "	@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "		cd packages/${pkg}; \$(MAKE) install; \\" >> packages/pkg_rules.make
	echo "	fi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-fetch :" >> packages/pkg_rules.make
	echo "	@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "		cd packages/${pkg}; \$(MAKE) fetch; \\" >> packages/pkg_rules.make
	echo "	fi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-uninstall :" >> packages/pkg_rules.make
	echo "	@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "		cd packages/${pkg}; \$(MAKE) uninstall; \\" >> packages/pkg_rules.make
	echo "	fi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-purge :" >> packages/pkg_rules.make
	echo "	@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "		cd packages/${pkg}; \$(MAKE) purge; \\" >> packages/pkg_rules.make
	echo "	fi" >> packages/pkg_rules.make
done
echo "" >> packages/pkg_rules.make


touch packages/up2date


