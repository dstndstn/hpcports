
hpcp="--->"

echo "${hpcp}  Updating package list"

echo "# This file auto-generated by \"make update\" " > packages/pkg_list.make

pkgs=""

for entry in `ls packages`; do
	if [ -d packages/${entry} ]; then
		pkgs="${pkgs} ${entry}"
	fi
done

echo "PKGS =${pkgs}" >> packages/pkg_list.make


echo "${hpcp}  Computing package dependencies"

echo "# This file auto-generated by \"make update\" " > packages/pkg_deps.make

for pkg in ${pkgs}; do
	deps=`head -n 1 packages/${pkg}/deps`
	echo "${pkg} : ${deps}" >> packages/pkg_deps.make
done


echo "${hpcp}  Generating package build rules"

echo "# This file auto-generated by \"make update\" " > packages/pkg_rules.make

for pkg in ${pkgs}; do
	echo "" >> packages/pkg_rules.make
	echo "${pkg} : install-common" >> packages/pkg_rules.make
	echo "\t@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "\t\tcd packages/${pkg}; \$(MAKE) install; \\" >> packages/pkg_rules.make
	echo "\tfi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-clean :" >> packages/pkg_rules.make
	echo "\t@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "\t\tcd packages/${pkg}; \$(MAKE) clean; \\" >> packages/pkg_rules.make
	echo "\tfi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-uninstall :" >> packages/pkg_rules.make
	echo "\t@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "\t\tcd packages/${pkg}; \$(MAKE) uninstall; \\" >> packages/pkg_rules.make
	echo "\tfi" >> packages/pkg_rules.make

	echo "" >> packages/pkg_rules.make
	echo "${pkg}-purge :" >> packages/pkg_rules.make
	echo "\t@if test \"x\$(${pkg}_OVERRIDE)\" = \"x\"; then \\" >> packages/pkg_rules.make
	echo "\t\tcd packages/${pkg}; \$(MAKE) purge; \\" >> packages/pkg_rules.make
	echo "\tfi" >> packages/pkg_rules.make
done
echo "" >> packages/pkg_rules.make


#echo "# This file auto-generated by \"make update\" " > packages/pkg_vars.make

#for pkg in ${pkgs}; do
#	echo "" >> packages/pkg_vars.make
#	version=`cat packages/${pkg}/Makefile | grep PKG_VERSION | awk '{ print $3 }'`
#	echo "ifndef ${pkg}_PREFIX" >> packages/pkg_vars.make
#	echo "\t${pkg}_PREFIX = -I\$(PREFIX)/${pkg}-${version}" >> packages/pkg_vars.make
#	cat packages/${pkg}/vars >> packages/pkg_vars.make
#	echo "endif" >> packages/pkg_vars.make
#done
#echo "" >> packages/pkg_vars.make


touch packages/up2date


